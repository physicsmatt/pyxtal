#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 18, 2018 11:34:35 PM CET  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pyxtal_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    pyxtal_support.set_Tk_var()
    top = Pyxtal_Main_Controls (root)
    pyxtal_support.init(root, top)
    root.mainloop()

w = None
def create_Pyxtal_Main_Controls(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    pyxtal_support.set_Tk_var()
    top = Pyxtal_Main_Controls (w)
    pyxtal_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Pyxtal_Main_Controls():
    global w
    w.destroy()
    w = None

class Pyxtal_Main_Controls:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family fixed -size 10 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family gothic -size 9 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("601x665+495+148")
        top.title("Pyxtal Main Controls")
        top.configure(relief="sunken")
        top.configure(highlightcolor="black")

        #PAGE defined these as global variables, which didn't work for
        #multiple instances of the class.  If GUI is re-generated by PAGE,
        #This will have to be put back in manually
        self.inFileType = tk.StringVar()
        self.darkSpheres = tk.BooleanVar()
        self.partTypeStr = tk.StringVar()
        self.periodBound = tk.BooleanVar()
        self.outCircles = tk.BooleanVar()
        self.outTriang = tk.BooleanVar()
        self.outAll = tk.BooleanVar()
        self.outMpeg = tk.BooleanVar()
        self.outLog = tk.BooleanVar()
        self.doOrientCorr = tk.BooleanVar()
        self.doTraject = tk.BooleanVar()
        self.retainWin = tk.BooleanVar()
        self.batchmode = tk.BooleanVar()
        self.lockViews = tk.BooleanVar()
        self.lockZoom = tk.BooleanVar()
        self.fromFrameStr = tk.StringVar()
        self.toFrameStr = tk.StringVar()
        self.byFrameStr = tk.StringVar()
        self.sphereSizeStr = tk.StringVar()
        self.imageSizeStr = tk.StringVar()


        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.017, rely=0.03, relheight=0.504
                , relwidth=0.483)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''Input Files''')
        self.Labelframe2.configure(width=290)

        self.fileListbox = ScrolledListBox(self.Labelframe2)
        self.fileListbox.place(relx=0.034, rely=0.478, relheight=0.507
                , relwidth=0.952, bordermode='ignore')
        self.fileListbox.configure(background="white")
        self.fileListbox.configure(font="TkFixedFont")
        self.fileListbox.configure(highlightcolor="#d9d9d9")
        self.fileListbox.configure(selectbackground="#c4c4c4")
        self.fileListbox.configure(width=10)

        self.AddButton = tk.Button(self.Labelframe2)
        self.AddButton.place(relx=0.034, rely=0.09, height=33, width=98
                , bordermode='ignore')
        self.AddButton.configure(activebackground="#d9d9d9")
        self.AddButton.configure(command=pyxtal_support.addButtonCommand)
        self.AddButton.configure(text='''Add Files''')

        self.ClearButton = tk.Button(self.Labelframe2)
        self.ClearButton.place(relx=0.586, rely=0.09, height=33, width=108
                , bordermode='ignore')
        self.ClearButton.configure(activebackground="#d9d9d9")
        self.ClearButton.configure(command=pyxtal_support.clearButtonCommand)
        self.ClearButton.configure(text='''Clear Files''')

        self.pathBox = tk.Text(self.Labelframe2)
        self.pathBox.place(relx=0.034, rely=0.299, relheight=0.09, relwidth=0.917
                , bordermode='ignore')
        self.pathBox.configure(background="white")
        self.pathBox.configure(font="TkTextFont")
        self.pathBox.configure(selectbackground="#c4c4c4")
        self.pathBox.configure(width=266)
        self.pathBox.configure(wrap='word')

        self.filesLabel = tk.Label(self.Labelframe2)
        self.filesLabel.place(relx=0.034, rely=0.418, height=17, width=46
                , bordermode='ignore')
        self.filesLabel.configure(activebackground="#f9f9f9")
        self.filesLabel.configure(font=font10)
        self.filesLabel.configure(text='''Files:''')

        self.pathLabel = tk.Label(self.Labelframe2)
        self.pathLabel.place(relx=0.034, rely=0.239, height=17, width=46
                , bordermode='ignore')
        self.pathLabel.configure(activebackground="#f9f9f9")
        self.pathLabel.configure(font=font10)
        self.pathLabel.configure(text='''Path:''')

        self.SaveDefButton = tk.Button(top)
        self.SaveDefButton.place(relx=0.782, rely=0.917, height=33, width=108)
        self.SaveDefButton.configure(activebackground="#d9d9d9")
        self.SaveDefButton.configure(command=pyxtal_support.saveButtonCommand)
        self.SaveDefButton.configure(text='''Save Defaults''')

        self.inputFrame = tk.LabelFrame(top)
        self.inputFrame.place(relx=0.017, rely=0.556, relheight=0.429
                , relwidth=0.483)
        self.inputFrame.configure(relief='groove')
        self.inputFrame.configure(text='''Input File Options''')
        self.inputFrame.configure(width=290)

        self.imageRadio = tk.Radiobutton(self.inputFrame)
        self.imageRadio.place(relx=0.034, rely=0.105, relheight=0.06
                , relwidth=0.497, bordermode='ignore')
        self.imageRadio.configure(activebackground="#d9d9d9")
        self.imageRadio.configure(anchor='w')
        self.imageRadio.configure(command=pyxtal_support.inFileTypeChange)
        self.imageRadio.configure(justify='left')
        self.imageRadio.configure(text='''Image file''')
        self.imageRadio.configure(value="image")
        self.imageRadio.configure(variable=self.inFileType)

        self.gsdAssemRadio = tk.Radiobutton(self.inputFrame)
        self.gsdAssemRadio.place(relx=0.034, rely=0.316, relheight=0.06
                , relwidth=0.548, bordermode='ignore')
        self.gsdAssemRadio.configure(activebackground="#d9d9d9")
        self.gsdAssemRadio.configure(anchor='w')
        self.gsdAssemRadio.configure(command=pyxtal_support.inFileTypeChange)
        self.gsdAssemRadio.configure(justify='left')
        self.gsdAssemRadio.configure(text='''gsd assemblies''')
        self.gsdAssemRadio.configure(value="assemblies")
        self.gsdAssemRadio.configure(variable=self.inFileType)

        self.gsdPartRadio = tk.Radiobutton(self.inputFrame)
        self.gsdPartRadio.place(relx=0.034, rely=0.211, relheight=0.06
                , relwidth=0.455, bordermode='ignore')
        self.gsdPartRadio.configure(activebackground="#d9d9d9")
        self.gsdPartRadio.configure(anchor='w')
        self.gsdPartRadio.configure(command=pyxtal_support.inFileTypeChange)
        self.gsdPartRadio.configure(justify='left')
        self.gsdPartRadio.configure(text='''gsd particles''')
        self.gsdPartRadio.configure(value="particles")
        self.gsdPartRadio.configure(variable=self.inFileType)

        self.sphereEntry = tk.Entry(self.inputFrame)
        self.sphereEntry.place(relx=0.414, rely=0.737, height=27, relwidth=0.228
                , bordermode='ignore')
        self.sphereEntry.configure(background="white")
        self.sphereEntry.configure(font="TkFixedFont")
        self.sphereEntry.configure(selectbackground="#c4c4c4")
        self.sphereEntry.configure(textvariable=self.sphereSizeStr)
        self.sphereEntry.bind('<FocusOut>',lambda e:pyxtal_support.validateInteger(e,
                                    self.sphereSizeStr,
                                    self.sphereSize))

        self.SphereSizeLabel = tk.Label(self.inputFrame)
        self.SphereSizeLabel.place(relx=0.052, rely=0.772, height=15, width=98
                , bordermode='ignore')
        self.SphereSizeLabel.configure(activebackground="#f9f9f9")
        self.SphereSizeLabel.configure(anchor='w')
        self.SphereSizeLabel.configure(text='''Sphere Size:''')

        self.PartTypeLabel = tk.Label(self.inputFrame)
        self.PartTypeLabel.place(relx=0.517, rely=0.316, height=17, width=68
                , bordermode='ignore')
        self.PartTypeLabel.configure(activebackground="#f9f9f9")
        self.PartTypeLabel.configure(anchor='w')
        self.PartTypeLabel.configure(text='''of type:''')

        self.partTypeEntry = tk.Entry(self.inputFrame)
        self.partTypeEntry.place(relx=0.724, rely=0.281, height=27
                , relwidth=0.228, bordermode='ignore')
        self.partTypeEntry.configure(background="white")
        self.partTypeEntry.configure(font="TkFixedFont")
        self.partTypeEntry.configure(selectbackground="#c4c4c4")
        self.partTypeEntry.configure(textvariable=self.partTypeStr)

        self.PeriodicCheck = tk.Checkbutton(self.inputFrame)
        self.PeriodicCheck.place(relx=0.034, rely=0.877, relheight=0.06
                , relwidth=0.638, bordermode='ignore')
        self.PeriodicCheck.configure(activebackground="#d9d9d9")
        self.PeriodicCheck.configure(anchor='w')
        self.PeriodicCheck.configure(justify='left')
        self.PeriodicCheck.configure(offrelief="sunken")
        self.PeriodicCheck.configure(text='''Periodic Boundaries''')
        self.PeriodicCheck.configure(variable=self.periodBound)

        self.framesframe = tk.LabelFrame(self.inputFrame)
        self.framesframe.place(relx=0.034, rely=0.421, relheight=0.263
                , relwidth=0.931, bordermode='ignore')
        self.framesframe.configure(relief='groove')
        self.framesframe.configure(text='''frames''')
        self.framesframe.configure(width=270)

        self.fromEntry = tk.Entry(self.framesframe)
        self.fromEntry.place(relx=0.185, rely=0.4, height=27, relwidth=0.133
                , bordermode='ignore')
        self.fromEntry.configure(background="white")
        self.fromEntry.configure(font="TkFixedFont")
        self.fromEntry.configure(selectbackground="#c4c4c4")
        self.fromEntry.configure(textvariable=self.fromFrameStr)
        self.fromEntry.bind('<FocusOut>',lambda e:pyxtal_support.validateInteger(e,
                                    self.fromFrameStr,
                                    self.fromFrame))

        self.fromLabel = tk.Label(self.framesframe)
        self.fromLabel.place(relx=0.037, rely=0.533, height=15, width=38
                , bordermode='ignore')
        self.fromLabel.configure(activebackground="#f9f9f9")
        self.fromLabel.configure(anchor='w')
        self.fromLabel.configure(text='''From''')

        self.toLabel = tk.Label(self.framesframe)
        self.toLabel.place(relx=0.37, rely=0.533, height=15, width=38
                , bordermode='ignore')
        self.toLabel.configure(activebackground="#f9f9f9")
        self.toLabel.configure(anchor='w')
        self.toLabel.configure(text='''to''')

        self.toEntry = tk.Entry(self.framesframe)
        self.toEntry.place(relx=0.481, rely=0.4, height=27, relwidth=0.133
                , bordermode='ignore')
        self.toEntry.configure(background="white")
        self.toEntry.configure(font="TkFixedFont")
        self.toEntry.configure(selectbackground="#c4c4c4")
        self.toEntry.configure(textvariable=self.toFrameStr)
        self.toEntry.bind('<FocusOut>',lambda e:pyxtal_support.validateInteger(e,
                                    self.toFrameStr,
                                    self.toFrame))

        self.byLabel = tk.Label(self.framesframe)
        self.byLabel.place(relx=0.704, rely=0.533, height=15, width=38
                , bordermode='ignore')
        self.byLabel.configure(activebackground="#f9f9f9")
        self.byLabel.configure(anchor='w')
        self.byLabel.configure(text='''by''')

        self.byEntry = tk.Entry(self.framesframe)
        self.byEntry.place(relx=0.815, rely=0.4, height=27, relwidth=0.133
                , bordermode='ignore')
        self.byEntry.configure(background="white")
        self.byEntry.configure(font="TkFixedFont")
        self.byEntry.configure(selectbackground="#c4c4c4")
        self.byEntry.configure(textvariable=self.byFrameStr)
        self.byEntry.bind('<FocusOut>',lambda e:pyxtal_support.validateInteger(e,
                                    self.byFrameStr,
                                    self.byFrame))

        self.darkSpheresCheck = tk.Checkbutton(self.inputFrame)
        self.darkSpheresCheck.place(relx=0.517, rely=0.105, relheight=0.06
                , relwidth=0.466, bordermode='ignore')
        self.darkSpheresCheck.configure(activebackground="#d9d9d9")
        self.darkSpheresCheck.configure(anchor='w')
        self.darkSpheresCheck.configure(justify='left')
        self.darkSpheresCheck.configure(text='''Dark Spheres''')
        self.darkSpheresCheck.configure(variable=self.darkSpheres)

        self.LoadDefButton = tk.Button(top)
        self.LoadDefButton.place(relx=0.549, rely=0.917, height=33, width=108)
        self.LoadDefButton.configure(activebackground="#d9d9d9")
        self.LoadDefButton.configure(command=pyxtal_support.loadButtonCommand)
        self.LoadDefButton.configure(text='''Load Defaults''')

        self.outputFrame = tk.LabelFrame(top)
        self.outputFrame.place(relx=0.532, rely=0.03, relheight=0.323
                , relwidth=0.449)
        self.outputFrame.configure(relief='groove')
        self.outputFrame.configure(text='''Output File Options''')
        self.outputFrame.configure(width=270)

        self.imageSizeEntry = tk.Entry(self.outputFrame)
        self.imageSizeEntry.place(relx=0.593, rely=0.512, height=27
                , relwidth=0.281, bordermode='ignore')
        self.imageSizeEntry.configure(background="white")
        self.imageSizeEntry.configure(font="TkFixedFont")
        self.imageSizeEntry.configure(selectbackground="#c4c4c4")
        self.imageSizeEntry.configure(textvariable=self.imageSizeStr)
        self.imageSizeEntry.bind('<FocusOut>',lambda e:pyxtal_support.validateInteger(e,
                                    self.imageSizeStr,
                                    self.imageSize))

        self.ImageSizeLabel = tk.Label(self.outputFrame)
        self.ImageSizeLabel.place(relx=0.056, rely=0.558, height=15, width=128
                , bordermode='ignore')
        self.ImageSizeLabel.configure(activebackground="#f9f9f9")
        self.ImageSizeLabel.configure(anchor='w')
        self.ImageSizeLabel.configure(text='''Output Image size:''')

        self.OutCirclesCheck = tk.Checkbutton(self.outputFrame)
        self.OutCirclesCheck.place(relx=0.037, rely=0.14, relheight=0.079
                , relwidth=0.648, bordermode='ignore')
        self.OutCirclesCheck.configure(activebackground="#d9d9d9")
        self.OutCirclesCheck.configure(anchor='w')
        self.OutCirclesCheck.configure(justify='left')
        self.OutCirclesCheck.configure(text='''Image and Circles''')
        self.OutCirclesCheck.configure(variable=self.outCircles)

        self.OutTriangCheck = tk.Checkbutton(self.outputFrame)
        self.OutTriangCheck.place(relx=0.037, rely=0.279, relheight=0.079
                , relwidth=0.648, bordermode='ignore')
        self.OutTriangCheck.configure(activebackground="#d9d9d9")
        self.OutTriangCheck.configure(anchor='w')
        self.OutTriangCheck.configure(justify='left')
        self.OutTriangCheck.configure(text='''Triangulation''')
        self.OutTriangCheck.configure(variable=self.outTriang)

        self.OutAllCheck = tk.Checkbutton(self.outputFrame)
        self.OutAllCheck.place(relx=0.037, rely=0.419, relheight=0.079
                , relwidth=0.759, bordermode='ignore')
        self.OutAllCheck.configure(activebackground="#d9d9d9")
        self.OutAllCheck.configure(anchor='w')
        self.OutAllCheck.configure(justify='left')
        self.OutAllCheck.configure(text='''Image + angle + defects''')
        self.OutAllCheck.configure(variable=self.outAll)

        self.outMpegCheck = tk.Checkbutton(self.outputFrame)
        self.outMpegCheck.place(relx=0.037, rely=0.698, relheight=0.079
                , relwidth=0.389, bordermode='ignore')
        self.outMpegCheck.configure(activebackground="#d9d9d9")
        self.outMpegCheck.configure(anchor='w')
        self.outMpegCheck.configure(justify='left')
        self.outMpegCheck.configure(text='''mpeg''')
        self.outMpegCheck.configure(variable=self.outMpeg)

        self.outLogCheck = tk.Checkbutton(self.outputFrame)
        self.outLogCheck.place(relx=0.037, rely=0.837, relheight=0.079
                , relwidth=0.389, bordermode='ignore')
        self.outLogCheck.configure(activebackground="#d9d9d9")
        self.outLogCheck.configure(anchor='w')
        self.outLogCheck.configure(justify='left')
        self.outLogCheck.configure(text='''Log file''')
        self.outLogCheck.configure(variable=self.outLog)

        self.analysisFrame = tk.LabelFrame(top)
        self.analysisFrame.place(relx=0.532, rely=0.376, relheight=0.128
                , relwidth=0.449)
        self.analysisFrame.configure(relief='groove')
        self.analysisFrame.configure(text='''Analysis''')
        self.analysisFrame.configure(width=270)

        self.TrajCheck = tk.Checkbutton(self.analysisFrame)
        self.TrajCheck.place(relx=0.037, rely=0.706, relheight=0.2
                , relwidth=0.574, bordermode='ignore')
        self.TrajCheck.configure(activebackground="#d9d9d9")
        self.TrajCheck.configure(anchor='w')
        self.TrajCheck.configure(justify='left')
        self.TrajCheck.configure(text='''Trajectories''')
        self.TrajCheck.configure(variable=self.doTraject)

        self.OrientCorrCheck = tk.Checkbutton(self.analysisFrame)
        self.OrientCorrCheck.place(relx=0.037, rely=0.353, relheight=0.2
                , relwidth=0.981, bordermode='ignore')
        self.OrientCorrCheck.configure(activebackground="#d9d9d9")
        self.OrientCorrCheck.configure(anchor='w')
        self.OrientCorrCheck.configure(justify='left')
        self.OrientCorrCheck.configure(text='''Orientational Correlation func.''')
        self.OrientCorrCheck.configure(variable=self.doOrientCorr)
        self.OrientCorrCheck.configure(width=265)

        self.windowFrame = tk.LabelFrame(top)
        self.windowFrame.place(relx=0.532, rely=0.526, relheight=0.218
                , relwidth=0.449)
        self.windowFrame.configure(relief='groove')
        self.windowFrame.configure(text='''Window Control''')
        self.windowFrame.configure(width=270)

        self.RetainCheck = tk.Checkbutton(self.windowFrame)
        self.RetainCheck.place(relx=0.037, rely=0.414, relheight=0.117
                , relwidth=0.441, bordermode='ignore')
        self.RetainCheck.configure(activebackground="#d9d9d9")
        self.RetainCheck.configure(anchor='w')
        self.RetainCheck.configure(justify='left')
        self.RetainCheck.configure(text='''Retain Windows''')
        self.RetainCheck.configure(variable=self.retainWin)

        self.GoButton = tk.Button(self.windowFrame)
        self.GoButton.place(relx=0.037, rely=0.621, height=43, width=108
                , bordermode='ignore')
        self.GoButton.configure(activebackground="#d9d9d9")
        self.GoButton.configure(command=pyxtal_support.GoButtonCommand)
        self.GoButton.configure(font=font9)
        self.GoButton.configure(text='''Go''')

        self.KillAllButton = tk.Button(self.windowFrame)
        self.KillAllButton.place(relx=0.556, rely=0.621, height=43, width=108
                , bordermode='ignore')
        self.KillAllButton.configure(activebackground="#d9d9d9")
        self.KillAllButton.configure(command=pyxtal_support.killAllButtonCommand)
        self.KillAllButton.configure(text='''Kill All 
Image Windows''')

        self.lockZoomCheck = tk.Checkbutton(self.windowFrame)
        self.lockZoomCheck.place(relx=0.556, rely=0.414, relheight=0.117
                , relwidth=0.404, bordermode='ignore')
        self.lockZoomCheck.configure(activebackground="#d9d9d9")
        self.lockZoomCheck.configure(anchor='w')
        self.lockZoomCheck.configure(justify='left')
        self.lockZoomCheck.configure(text='''Lock zoom''')
        self.lockZoomCheck.configure(variable=self.lockZoom)
        self.lockZoomCheck.configure(width=109)

        self.lockViewsCheck = tk.Checkbutton(self.windowFrame)
        self.lockViewsCheck.place(relx=0.556, rely=0.207, relheight=0.117
                , relwidth=0.404, bordermode='ignore')
        self.lockViewsCheck.configure(activebackground="#d9d9d9")
        self.lockViewsCheck.configure(anchor='w')
        self.lockViewsCheck.configure(justify='left')
        self.lockViewsCheck.configure(text='''Lock views''')
        self.lockViewsCheck.configure(variable=self.lockViews)
        self.lockViewsCheck.configure(width=109)

        self.BatchmodeCheck = tk.Checkbutton(self.windowFrame)
        self.BatchmodeCheck.place(relx=0.037, rely=0.207, relheight=0.117
                , relwidth=0.478, bordermode='ignore')
        self.BatchmodeCheck.configure(activebackground="#d9d9d9")
        self.BatchmodeCheck.configure(anchor='w')
        self.BatchmodeCheck.configure(justify='left')
        self.BatchmodeCheck.configure(text='''Quiet Batchmode''')
        self.BatchmodeCheck.configure(variable=self.batchmode)
        self.BatchmodeCheck.configure(command=pyxtal_support.batchmodeChange)
        self.BatchmodeCheck.configure(width=129)

        self.Progressframe = tk.LabelFrame(top)
        self.Progressframe.place(relx=0.532, rely=0.767, relheight=0.113
                , relwidth=0.449)
        self.Progressframe.configure(relief='groove')
        self.Progressframe.configure(text='''Progress''')
        self.Progressframe.configure(width=270)

        self.fileProgressbar = ttk.Progressbar(self.Progressframe)
        self.fileProgressbar.place(relx=0.556, rely=0.267, relwidth=0.407
                , relheight=0.0, height=19, bordermode='ignore')
        self.fileProgressbar.configure(length="110")

        self.fileMessage = tk.Message(self.Progressframe)
        self.fileMessage.place(relx=0.037, rely=0.267, relheight=0.227
                , relwidth=0.485, bordermode='ignore')
        self.fileMessage.configure(anchor='w')
        self.fileMessage.configure(text='''Files: ''')
        self.fileMessage.configure(width=131)

        self.frameMessage = tk.Message(self.Progressframe)
        self.frameMessage.place(relx=0.037, rely=0.667, relheight=0.227
                , relwidth=0.559, bordermode='ignore')
        self.frameMessage.configure(anchor='w')
        self.frameMessage.configure(text='''Frames: ''')
        self.frameMessage.configure(width=151)

        self.frameProgressbar = ttk.Progressbar(self.Progressframe)
        self.frameProgressbar.place(relx=0.556, rely=0.667, relwidth=0.407
                , relheight=0.0, height=19, bordermode='ignore')
        self.frameProgressbar.configure(length="110")



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





