#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 19, 2018 10:39:12 AM CEST  platform: Linux

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pyxtalmain_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    pyxtalmain_support.set_Tk_var()
    top = Pyxtal_Main_Controls (root)
    pyxtalmain_support.init(root, top)
    root.mainloop()

w = None
def create_Pyxtal_Main_Controls(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    pyxtalmain_support.set_Tk_var()
    top = Pyxtal_Main_Controls (w)
    pyxtalmain_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Pyxtal_Main_Controls():
    global w
    w.destroy()
    w = None


class Pyxtal_Main_Controls:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font11 = "-family fixed -size 10 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family gothic -size 9 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("591x626+505+156")
        top.title("Pyxtal Main Controls")
        top.configure(relief="sunken")
        top.configure(highlightcolor="black")



        self.Labelframe2 = LabelFrame(top)
        self.Labelframe2.place(relx=0.017, rely=0.032, relheight=0.455
                , relwidth=0.491)
        self.Labelframe2.configure(relief=GROOVE)
        self.Labelframe2.configure(text='''Input Files''')
        self.Labelframe2.configure(width=290)

        self.fileListbox = ScrolledListBox(self.Labelframe2)
        self.fileListbox.place(relx=0.034, rely=0.561, relheight=0.421
                , relwidth=0.952, bordermode='ignore')
        self.fileListbox.configure(background="white")
        self.fileListbox.configure(font="TkFixedFont")
        self.fileListbox.configure(highlightcolor="#d9d9d9")
        self.fileListbox.configure(selectbackground="#c4c4c4")
        self.fileListbox.configure(width=10)

        self.AddButton = Button(self.Labelframe2)
        self.AddButton.place(relx=0.034, rely=0.105, height=33, width=98
                , bordermode='ignore')
        self.AddButton.configure(activebackground="#d9d9d9")
        self.AddButton.configure(command=pyxtalmain_support.addButtonCommand)
        self.AddButton.configure(text='''Add Files''')

        self.ClearButton = Button(self.Labelframe2)
        self.ClearButton.place(relx=0.586, rely=0.105, height=33, width=108
                , bordermode='ignore')
        self.ClearButton.configure(activebackground="#d9d9d9")
        self.ClearButton.configure(command=pyxtalmain_support.clearButtonCommand)
        self.ClearButton.configure(text='''Clear Files''')

        self.pathBox = Text(self.Labelframe2)
        self.pathBox.place(relx=0.034, rely=0.351, relheight=0.105
                , relwidth=0.917, bordermode='ignore')
        self.pathBox.configure(background="white")
        self.pathBox.configure(font="TkTextFont")
        self.pathBox.configure(selectbackground="#c4c4c4")
        self.pathBox.configure(width=266)
        self.pathBox.configure(wrap=WORD)

        self.filesLabel = Label(self.Labelframe2)
        self.filesLabel.place(relx=0.034, rely=0.491, height=17, width=46
                , bordermode='ignore')
        self.filesLabel.configure(font=font11)
        self.filesLabel.configure(text='''Files:''')

        self.pathLabel = Label(self.Labelframe2)
        self.pathLabel.place(relx=0.034, rely=0.281, height=17, width=46
                , bordermode='ignore')
        self.pathLabel.configure(activebackground="#f9f9f9")
        self.pathLabel.configure(font=font11)
        self.pathLabel.configure(text='''Path:''')

        self.SaveDefButton = Button(top)
        self.SaveDefButton.place(relx=0.778, rely=0.879, height=33, width=108)
        self.SaveDefButton.configure(activebackground="#d9d9d9")
        self.SaveDefButton.configure(command=pyxtalmain_support.saveButtonCommand)
        self.SaveDefButton.configure(text='''Save Defaults''')

        self.inputFrame = LabelFrame(top)
        self.inputFrame.place(relx=0.017, rely=0.511, relheight=0.455
                , relwidth=0.491)
        self.inputFrame.configure(relief=GROOVE)
        self.inputFrame.configure(text='''Input File Options''')
        self.inputFrame.configure(width=290)

        self.imageRadio = Radiobutton(self.inputFrame)
        self.imageRadio.place(relx=0.034, rely=0.105, relheight=0.06
                , relwidth=0.497, bordermode='ignore')
        self.imageRadio.configure(activebackground="#d9d9d9")
        self.imageRadio.configure(anchor=W)
        self.imageRadio.configure(command=pyxtalmain_support.inFileTypeChange)
        self.imageRadio.configure(justify=LEFT)
        self.imageRadio.configure(text='''Image file''')
        self.imageRadio.configure(value="image")
        self.imageRadio.configure(variable=pyxtalmain_support.inFileType)

        self.gsdAssemRadio = Radiobutton(self.inputFrame)
        self.gsdAssemRadio.place(relx=0.034, rely=0.316, relheight=0.06
                , relwidth=0.548, bordermode='ignore')
        self.gsdAssemRadio.configure(activebackground="#d9d9d9")
        self.gsdAssemRadio.configure(anchor=W)
        self.gsdAssemRadio.configure(command=pyxtalmain_support.inFileTypeChange)
        self.gsdAssemRadio.configure(justify=LEFT)
        self.gsdAssemRadio.configure(text='''gsd assemblies''')
        self.gsdAssemRadio.configure(value="assemblies")
        self.gsdAssemRadio.configure(variable=pyxtalmain_support.inFileType)

        self.gsdPartRadio = Radiobutton(self.inputFrame)
        self.gsdPartRadio.place(relx=0.034, rely=0.211, relheight=0.06
                , relwidth=0.455, bordermode='ignore')
        self.gsdPartRadio.configure(activebackground="#d9d9d9")
        self.gsdPartRadio.configure(anchor=W)
        self.gsdPartRadio.configure(command=pyxtalmain_support.inFileTypeChange)
        self.gsdPartRadio.configure(justify=LEFT)
        self.gsdPartRadio.configure(text='''gsd particles''')
        self.gsdPartRadio.configure(value="particles")
        self.gsdPartRadio.configure(variable=pyxtalmain_support.inFileType)

        self.sphereEntry = Entry(self.inputFrame)
        self.sphereEntry.place(relx=0.414, rely=0.737, height=27, relwidth=0.228
                , bordermode='ignore')
        self.sphereEntry.configure(background="white")
        self.sphereEntry.configure(font="TkFixedFont")
        self.sphereEntry.configure(selectbackground="#c4c4c4")
        self.sphereEntry.configure(textvariable=pyxtalmain_support.sphereSizeStr)
        self.sphereEntry.bind('<FocusOut>',lambda e:pyxtalmain_support.validateInteger(e,
                                    pyxtalmain_support.sphereSizeStr,
                                    pyxtalmain_support.sphereSize))

        self.SphereSizeLabel = Label(self.inputFrame)
        self.SphereSizeLabel.place(relx=0.052, rely=0.772, height=15, width=98
                , bordermode='ignore')
        self.SphereSizeLabel.configure(activebackground="#f9f9f9")
        self.SphereSizeLabel.configure(anchor=W)
        self.SphereSizeLabel.configure(text='''Sphere Size:''')

        self.PartTypeLabel = Label(self.inputFrame)
        self.PartTypeLabel.place(relx=0.517, rely=0.316, height=17, width=68
                , bordermode='ignore')
        self.PartTypeLabel.configure(activebackground="#f9f9f9")
        self.PartTypeLabel.configure(anchor=W)
        self.PartTypeLabel.configure(text='''of type:''')

        self.partTypeEntry = Entry(self.inputFrame)
        self.partTypeEntry.place(relx=0.724, rely=0.281, height=27
                , relwidth=0.228, bordermode='ignore')
        self.partTypeEntry.configure(background="white")
        self.partTypeEntry.configure(font="TkFixedFont")
        self.partTypeEntry.configure(selectbackground="#c4c4c4")
        self.partTypeEntry.configure(textvariable=pyxtalmain_support.partTypeStr)

        self.PeriodicCheck = Checkbutton(self.inputFrame)
        self.PeriodicCheck.place(relx=0.034, rely=0.877, relheight=0.06
                , relwidth=0.638, bordermode='ignore')
        self.PeriodicCheck.configure(activebackground="#d9d9d9")
        self.PeriodicCheck.configure(anchor=W)
        self.PeriodicCheck.configure(justify=LEFT)
        self.PeriodicCheck.configure(offrelief="sunken")
        self.PeriodicCheck.configure(text='''Periodic Boundaries''')
        self.PeriodicCheck.configure(variable=pyxtalmain_support.periodBound)

        self.framesframe = LabelFrame(self.inputFrame)
        self.framesframe.place(relx=0.034, rely=0.421, relheight=0.263
                , relwidth=0.931, bordermode='ignore')
        self.framesframe.configure(relief=GROOVE)
        self.framesframe.configure(text='''frames''')
        self.framesframe.configure(width=270)

        self.fromEntry = Entry(self.framesframe)
        self.fromEntry.place(relx=0.185, rely=0.4, height=27, relwidth=0.133
                , bordermode='ignore')
        self.fromEntry.configure(background="white")
        self.fromEntry.configure(font="TkFixedFont")
        self.fromEntry.configure(selectbackground="#c4c4c4")
        self.fromEntry.configure(textvariable=pyxtalmain_support.fromFrameStr)
        self.fromEntry.bind('<FocusOut>',lambda e:pyxtalmain_support.validateInteger(e,
                                    pyxtalmain_support.fromFrameStr,
                                    pyxtalmain_support.fromFrame))

        self.fromLabel = Label(self.framesframe)
        self.fromLabel.place(relx=0.037, rely=0.533, height=15, width=38
                , bordermode='ignore')
        self.fromLabel.configure(activebackground="#f9f9f9")
        self.fromLabel.configure(anchor=W)
        self.fromLabel.configure(text='''From''')

        self.toLabel = Label(self.framesframe)
        self.toLabel.place(relx=0.37, rely=0.533, height=15, width=38
                , bordermode='ignore')
        self.toLabel.configure(activebackground="#f9f9f9")
        self.toLabel.configure(anchor=W)
        self.toLabel.configure(text='''to''')

        self.toEntry = Entry(self.framesframe)
        self.toEntry.place(relx=0.481, rely=0.4, height=27, relwidth=0.133
                , bordermode='ignore')
        self.toEntry.configure(background="white")
        self.toEntry.configure(font="TkFixedFont")
        self.toEntry.configure(selectbackground="#c4c4c4")
        self.toEntry.configure(textvariable=pyxtalmain_support.toFrameStr)
        self.toEntry.bind('<FocusOut>',lambda e:pyxtalmain_support.validateInteger(e,
                                    pyxtalmain_support.toFrameStr,
                                    pyxtalmain_support.toFrame))

        self.byLabel = Label(self.framesframe)
        self.byLabel.place(relx=0.704, rely=0.533, height=15, width=38
                , bordermode='ignore')
        self.byLabel.configure(activebackground="#f9f9f9")
        self.byLabel.configure(anchor=W)
        self.byLabel.configure(text='''by''')

        self.byEntry = Entry(self.framesframe)
        self.byEntry.place(relx=0.815, rely=0.4, height=27, relwidth=0.133
                , bordermode='ignore')
        self.byEntry.configure(background="white")
        self.byEntry.configure(font="TkFixedFont")
        self.byEntry.configure(selectbackground="#c4c4c4")
        self.byEntry.configure(textvariable=pyxtalmain_support.byFrameStr)
        self.byEntry.bind('<FocusOut>',lambda e:pyxtalmain_support.validateInteger(e,
                                    pyxtalmain_support.byFrameStr,
                                    pyxtalmain_support.byFrame))

        self.darkSpheresCheck = Checkbutton(self.inputFrame)
        self.darkSpheresCheck.place(relx=0.517, rely=0.105, relheight=0.06
                , relwidth=0.466, bordermode='ignore')
        self.darkSpheresCheck.configure(activebackground="#d9d9d9")
        self.darkSpheresCheck.configure(anchor=W)
        self.darkSpheresCheck.configure(justify=LEFT)
        self.darkSpheresCheck.configure(text='''Dark Spheres''')
        self.darkSpheresCheck.configure(variable=pyxtalmain_support.darkSpheres)

        self.LoadDefButton = Button(top)
        self.LoadDefButton.place(relx=0.558, rely=0.879, height=33, width=108)
        self.LoadDefButton.configure(activebackground="#d9d9d9")
        self.LoadDefButton.configure(command=pyxtalmain_support.loadButtonCommand)
        self.LoadDefButton.configure(text='''Load Defaults''')

        self.outputFrame = LabelFrame(top)
        self.outputFrame.place(relx=0.541, rely=0.032, relheight=0.343
                , relwidth=0.44)
        self.outputFrame.configure(relief=GROOVE)
        self.outputFrame.configure(text='''Output File Options''')
        self.outputFrame.configure(width=260)

        self.imageSizeEntry = Entry(self.outputFrame)
        self.imageSizeEntry.place(relx=0.577, rely=0.512, height=27
                , relwidth=0.292, bordermode='ignore')
        self.imageSizeEntry.configure(background="white")
        self.imageSizeEntry.configure(font="TkFixedFont")
        self.imageSizeEntry.configure(selectbackground="#c4c4c4")
        self.imageSizeEntry.configure(textvariable=pyxtalmain_support.imageSizeStr)
        self.imageSizeEntry.bind('<FocusOut>',lambda e:pyxtalmain_support.validateInteger(e,
                                    pyxtalmain_support.imageSizeStr,
                                    pyxtalmain_support.imageSize))

        self.ImageSizeLabel = Label(self.outputFrame)
        self.ImageSizeLabel.place(relx=0.058, rely=0.558, height=15, width=128
                , bordermode='ignore')
        self.ImageSizeLabel.configure(activebackground="#f9f9f9")
        self.ImageSizeLabel.configure(anchor=W)
        self.ImageSizeLabel.configure(text='''Output Image size:''')

        self.OutCirclesCheck = Checkbutton(self.outputFrame)
        self.OutCirclesCheck.place(relx=0.038, rely=0.14, relheight=0.079
                , relwidth=0.673, bordermode='ignore')
        self.OutCirclesCheck.configure(activebackground="#d9d9d9")
        self.OutCirclesCheck.configure(anchor=W)
        self.OutCirclesCheck.configure(justify=LEFT)
        self.OutCirclesCheck.configure(text='''Image and Circles''')
        self.OutCirclesCheck.configure(variable=pyxtalmain_support.outCircles)

        self.OutTriangCheck = Checkbutton(self.outputFrame)
        self.OutTriangCheck.place(relx=0.038, rely=0.279, relheight=0.079
                , relwidth=0.673, bordermode='ignore')
        self.OutTriangCheck.configure(activebackground="#d9d9d9")
        self.OutTriangCheck.configure(anchor=W)
        self.OutTriangCheck.configure(justify=LEFT)
        self.OutTriangCheck.configure(text='''Triangulation''')
        self.OutTriangCheck.configure(variable=pyxtalmain_support.outTriang)

        self.OutAllCheck = Checkbutton(self.outputFrame)
        self.OutAllCheck.place(relx=0.038, rely=0.419, relheight=0.079
                , relwidth=0.788, bordermode='ignore')
        self.OutAllCheck.configure(activebackground="#d9d9d9")
        self.OutAllCheck.configure(anchor=W)
        self.OutAllCheck.configure(justify=LEFT)
        self.OutAllCheck.configure(text='''Image + angle + defects''')
        self.OutAllCheck.configure(variable=pyxtalmain_support.outAll)

        self.outMpegCheck = Checkbutton(self.outputFrame)
        self.outMpegCheck.place(relx=0.038, rely=0.698, relheight=0.079
                , relwidth=0.404, bordermode='ignore')
        self.outMpegCheck.configure(activebackground="#d9d9d9")
        self.outMpegCheck.configure(anchor=W)
        self.outMpegCheck.configure(justify=LEFT)
        self.outMpegCheck.configure(text='''mpeg''')
        self.outMpegCheck.configure(variable=pyxtalmain_support.outMpeg)

        self.outLogCheck = Checkbutton(self.outputFrame)
        self.outLogCheck.place(relx=0.038, rely=0.837, relheight=0.079
                , relwidth=0.404, bordermode='ignore')
        self.outLogCheck.configure(activebackground="#d9d9d9")
        self.outLogCheck.configure(anchor=W)
        self.outLogCheck.configure(justify=LEFT)
        self.outLogCheck.configure(text='''Log file''')
        self.outLogCheck.configure(variable=pyxtalmain_support.outLog)

        self.analysisFrame = LabelFrame(top)
        self.analysisFrame.place(relx=0.541, rely=0.399, relheight=0.136
                , relwidth=0.44)
        self.analysisFrame.configure(relief=GROOVE)
        self.analysisFrame.configure(text='''Analysis''')
        self.analysisFrame.configure(width=260)

        self.TrajCheck = Checkbutton(self.analysisFrame)
        self.TrajCheck.place(relx=0.038, rely=0.706, relheight=0.2
                , relwidth=0.596, bordermode='ignore')
        self.TrajCheck.configure(activebackground="#d9d9d9")
        self.TrajCheck.configure(anchor=W)
        self.TrajCheck.configure(justify=LEFT)
        self.TrajCheck.configure(text='''Trajectories''')
        self.TrajCheck.configure(variable=pyxtalmain_support.doTraject)

        self.OrientCorrCheck = Checkbutton(self.analysisFrame)
        self.OrientCorrCheck.place(relx=0.038, rely=0.353, relheight=0.2
                , relwidth=0.827, bordermode='ignore')
        self.OrientCorrCheck.configure(activebackground="#d9d9d9")
        self.OrientCorrCheck.configure(anchor=W)
        self.OrientCorrCheck.configure(justify=LEFT)
        self.OrientCorrCheck.configure(text='''Orientational Correl. func.''')
        self.OrientCorrCheck.configure(variable=pyxtalmain_support.doOrientCorr)

        self.windowFrame = LabelFrame(top)
        self.windowFrame.place(relx=0.541, rely=0.559, relheight=0.28
                , relwidth=0.44)
        self.windowFrame.configure(relief=GROOVE)
        self.windowFrame.configure(text='''Window Control''')
        self.windowFrame.configure(width=260)

        self.RetainCheck = Checkbutton(self.windowFrame)
        self.RetainCheck.place(relx=0.038, rely=0.171, relheight=0.097
                , relwidth=0.458, bordermode='ignore')
        self.RetainCheck.configure(activebackground="#d9d9d9")
        self.RetainCheck.configure(anchor=W)
        self.RetainCheck.configure(justify=LEFT)
        self.RetainCheck.configure(text='''Retain Windows''')
        self.RetainCheck.configure(variable=pyxtalmain_support.retainWin)

        self.GoButton = Button(self.windowFrame)
        self.GoButton.place(relx=0.038, rely=0.686, height=43, width=108
                , bordermode='ignore')
        self.GoButton.configure(activebackground="#d9d9d9")
        self.GoButton.configure(command=pyxtalmain_support.GoButtonCommand)
        self.GoButton.configure(font=font9)
        self.GoButton.configure(text='''Go''')

        self.KillAllButton = Button(self.windowFrame)
        self.KillAllButton.place(relx=0.538, rely=0.686, height=43, width=108
                , bordermode='ignore')
        self.KillAllButton.configure(activebackground="#d9d9d9")
        self.KillAllButton.configure(text='''Kill All 
Image Windows''')

        self.lockZoomCheck = Checkbutton(self.windowFrame)
        self.lockZoomCheck.place(relx=0.038, rely=0.514, relheight=0.097
                , relwidth=0.458, bordermode='ignore')
        self.lockZoomCheck.configure(activebackground="#d9d9d9")
        self.lockZoomCheck.configure(anchor=W)
        self.lockZoomCheck.configure(justify=LEFT)
        self.lockZoomCheck.configure(text='''Lock zoom''')
        self.lockZoomCheck.configure(variable=pyxtalmain_support.lockZoom)

        self.lockViewsCheck = Checkbutton(self.windowFrame)
        self.lockViewsCheck.place(relx=0.038, rely=0.343, relheight=0.097
                , relwidth=0.458, bordermode='ignore')
        self.lockViewsCheck.configure(activebackground="#d9d9d9")
        self.lockViewsCheck.configure(anchor=W)
        self.lockViewsCheck.configure(justify=LEFT)
        self.lockViewsCheck.configure(text='''Lock views''')
        self.lockViewsCheck.configure(variable=pyxtalmain_support.lockViews)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



