#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 15, 2018 11:55:06 AM CEST  platform: Linux
#    Oct 15, 2018 12:26:07 PM CEST  platform: Linux
#    Oct 16, 2018 11:21:03 AM CEST  platform: Linux

import sys
import pyxtalviewer

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import tkinter.filedialog as fd
import os.path

def set_Tk_var():
    global inFileType
    inFileType = StringVar(value="image")
    global darkSpheres
    darkSpheres = BooleanVar(value=False)
    global partTypeStr
    partTypeStr = StringVar(value="B")
    global fromFrame
    fromFrame=[0]
    import globalVariableList
    #global toFrame
    toFrame=[-1]
    global byFrame
    byFrame=[1]
    global sphereSize
    sphereSize=[7]
    global periodBound
    periodBound = BooleanVar(value=False)

    global outCircles
    outCircles = BooleanVar(value=True)
    global outTriang
    outTriang = BooleanVar(value=True)
    global outAll
    outAll = BooleanVar(value=True)
    global imageSize
    imageSize=[-1]
    global outMpeg
    outMpeg = BooleanVar(value=False)
    global outLog
    outLog = BooleanVar(value=True)

    global doOrientCorr
    doOrientCorr = BooleanVar(value=False)
    global doTraject
    doTraject = BooleanVar(value=False)

    global retainWin
    retainWin = BooleanVar(value=True)
    global lockViews
    lockViews = BooleanVar(value=False)
    global lockZoom
    lockZoom = BooleanVar(value=False)

    global fromFrameStr
    fromFrameStr=StringVar(value=str(fromFrame[0]))
    global toFrameStr
    toFrameStr=StringVar(value=str(toFrame[0]))
    global byFrameStr
    byFrameStr=StringVar(value=str(byFrame[0]))
    global sphereSizeStr
    sphereSizeStr=StringVar(value=str(sphereSize[0]))
    global imageSizeStr
    imageSizeStr=StringVar(value=str(imageSize[0]))



#    global whichImage
#    whichImage = StringVar()
    global invertimage
    invertimage = StringVar()
    global showCircles
    showCircles = StringVar()
    global showTriang
    showTriang = StringVar()
    global showDefects
    showDefects = StringVar()
    global showOrientation
    showOrientation = StringVar()
    global showTraject
    showTraject = StringVar()
    global showStats
    showStats = StringVar()

def inFileTypeChange():
    print('pyxtalmain_support.inFileTypeChange')
    inputtype = inFileType.get()
    #see https://stackoverflow.com/questions/24942760/is-there-a-way-to-gray-out-disable-a-tkinter-frame
    sys.stdout.flush()
    if inputtype=='image':
       pmw.darkSpheresCheck.configure(state=NORMAL)
       pmw.SaveDefButton.configure(state=NORMAL)
       print(inputtype)
    if inputtype=='particles':
       pmw.darkSpheresCheck.configure(state=DISABLED)
       pmw.SaveDefButton.configure(state=DISABLED)
       print(inputtype)
    if inputtype=='assemblies':
       pmw.darkSpheresCheck.configure(state=DISABLED)
       pmw.SaveDefButton.configure(state=DISABLED)
       print(inputtype)
       print(pmw.cat)
    sys.stdout.flush()


def validateInteger(p1, thestring, theinteger):
    #This function is used for Entry fields where an integer is required.
    #If user types a non-integer, like "abc" or 4.1, the value is rejected,
    #and the previous value is retained.
    #Some notes: I tried to implement this with the validatecommand apparatus
    #in tkinter, but that seemed more aimed at character-by-character checking.
    #For each entry (like sphereSize, for instance), there's both a string 
    #"sphereSizeStr" which is a tk StringVar, and "sphereSize" which is a list
    #that holds a single integer value.  The list is required so that it can be
    #effectively passed by reference, and thus changed inside this function.
    #STILL TO FIX sometime, maybe: figure out how to call this function when
    #user clicks on a different widget; that is, broaden the meaning of
    #"focusout" when this function is called.

    #print('pyxtalviewer_support.yyyyy', thestring, theinteger)
    #print('p1 = {0}'.format(p1))
    #sys.stdout.flush()
    try:
        theinteger[0]=int(thestring.get())
    #    print("after assignment, fromFrame:", theinteger[0])
    except ValueError:
    #    print("rejected")
        thestring.set(str(theinteger[0]))

def GoButtonCommand():
    print('pyxtalmain_support.GoButtonCommand')
    sys.stdout.flush()
    pmw.numFiles=2
    for i in range(0,w.numFiles):
        #pyxtalviewer.vp_start_gui()
        #self.app = pyxtal_win(tk.Toplevel(self.master), self)
        pmw.arthur = pyxtalviewer.Pyxtal_Viewer(Toplevel(root))

def addButtonCommand():
    global pmw
    print('pyxtalmain_support.AddButtonCommand')
    sys.stdout.flush()
    filenames = fd.askopenfilenames() # show an "Open" dialog box and return the path to the selected file
    print(os.path.dirname(filenames[0]))
    pmw.path = os.path.dirname(filenames[0])
    for filename in filenames:
        print(os.path.basename(filename))
        pmw.filelist.append(os.path.basename(filename))
        pmw.fileListbox.insert(END, os.path.basename(filename))

def clearButtonCommand():
    global pmw
    print('pyxtalmain_support.ClearButtonCommand')
    sys.stdout.flush()
    print("path is:", pmw.path)
    print("filelist is:")
    print(pmw.filelist)

def init(top, gui, *args, **kwargs):
    global pmw, top_level, root
    pmw = gui
    top_level = top
    root = top
    pmw.cat = [44,52]
    pmw.filelist = list()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import pyxtalviewer
    import pyxtalmain
    pyxtalmain.vp_start_gui()

